C:\Program Files (x86)\Microchip\mplabc18\v3.47\mpasm;
C:\Program Files (x86)\Microchip\mplabc18\v3.47\bin;
C:\Program Files (x86)\ATMEL Corporation\SAM-BA v2.10;
C:\Program Files (x86)\Atmel\sam-ba_2.12\drv\;
C:\Program Files (x86)\Atmel\sam-ba_2.12;
D:\Program Files (x86)\SSH Communications Security\SSH Secure Shell



C:\Program Files (x86)\Microchip\xc8\v1.20\bin;
C:\Program Files (x86)\Microchip\mplabc18\v3.47\mpasm;
C:\Program Files (x86)\Microchip\mplabc18\v3.47\bin;
%SystemRoot%\system32;%SystemRoot%;
%SystemRoot%\System32\Wbem;
%SYSTEMROOT%\System32\WindowsPowerShell\v1.0\;
C:\Program Files\TortoiseSVN\bin;
C:\Program Files (x86)\Microchip\MPLAB C32 Suite\bin;
c:\Program Files (x86)\QuickTime\QTSystem\;
C:\Program Files (x86)\Microchip\xc8\v1.38\bin;
D:\Renesas Software Install Path\Renesas RX Compiler V2.00.01\bin;
C:\Program Files (x86)\Renesas\bin;
F:\Git\cmd

.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC

ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC/RnpeYJ9KHUt/KtVWrIwV7nuqMqK3nNjFnlJ9gzlpBjjLGozX9TVB8lHoeT4O13H8Rtd1V5hmAaEaNZlEsDb6zJMJsO+FEVav6BSATVSohxz0qkMI4IYH8IF3+tm3vov1edrXFQkpkl7FMAWYajNtbv5tlV4wl36aI8rL8mp18Eh7RZIb0Rm1xInIiuHdtjfuJiPJTA6Gn7lFn8+Jwv4e2X69ksxg9KoNahBoYt8/eyjTIog7MVElw9tC5NK8d6OhY5m/1Cofw8Sr5rzaHnlNJV1RakQlrPKb0SqqjyLiA/+IgHDB0hzXvmFXfajUtsQXtrZ6dXtG9qfu2OLLbQyFFPGJOWdCR5rX3NqyaDXFZHpIVRtJsqVL3iPQA3JbqH0qvENoBbMW67ZAgysCtvcSIIqfVpXCv6btWylqQ553cJceKkd2odJim1UAub60dvvH9wGmNzeF/q6Uzi+7urw+Gdkh2MkNE550X8oL5HxSvrDhGc64ZMkPo6iryPuId4CO0JVXmv67uHRSkodCaJ4AE79N2QA9GJ3KmWffXqnyPdufDoRiRDr8t483QFWcfUDneHLLwz1rZiDb3C+PNxTLETUDwaZiRhSZyyrPbILjrWBwfvmpoll9jMf6ZyioGuQCMclCmAADC4MdFoXTsFmo2cDQcD2ymweuHTg+7glICw== Flynn_Smith@163.com

$ git remote add origin git@github.com:michaelliao/learngit.git

$ ssh-keygen -t rsa -C "youremail@example.com"



首先，我们创建dev分支，然后切换到dev分支：
$ git checkout -b dev
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
$ git branch dev
$ git checkout dev
然后，用git branch命令查看当前分支：
git branch命令会列出所有分支，当前分支前面会标一个*号。
然后，我们就可以在dev分支上正常提交，比如对readme.txt做个修改，加上一行：
dev分支的工作完成，我们就可以切换回master分支：git checkout master
切换回master分支后，再查看一个readme.txt文件，刚才添加的内容不见了！因为那个提交是在dev分支上，而master分支此刻的提交点并没有变：

现在，我们把dev分支的工作成果合并到master分支上： git merge dev
注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。当然，也不是每次合并都能Fast-forward

合并完成后，就可以放心地删除dev分支了：git branch -d dev
删除后，查看branch，就只剩下master分支了：

